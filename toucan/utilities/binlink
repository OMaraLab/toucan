#!/usr/bin/env python3
"""
Symlink a program to $HOME/bin
"""
import sys
import os
import argparse

"""
Parsing arguments
"""
parser = argparse.ArgumentParser(add_help=True, 
                                description='symlink to ~/bin')

parser.add_argument('source', 
                    help='source')
parser.add_argument('target', nargs='?', 
                    help='target')
parser.add_argument('--force', dest='overwrite', action='store_true', 
                    help='overwrite an existing target in ~/bin')


"""
Symlinking
"""
def binlink(source, target, overwrite=False):
    base_name = os.path.basename(source) if not target else target
    source_path = os.path.abspath(source)
    target_path = os.path.abspath(os.path.join(bin_path, base_name))

    if os.path.lexists(target_path):
        if overwrite:
            os.unlink(target_path)
        else:
            print(f'Error: {target_path} already exists. '
                   'Try another name or overwrite with --force')
            return

    os.symlink(source_path, target_path)

if __name__ == '__main__':
    """
    Finding and validating environment
    """
    HOME = os.environ['HOME']
    bin_path = os.path.join(HOME, 'bin')
    create_bin = None

    args = parser.parse_args(sys.argv[1:])

    if not os.path.isdir(bin_path):
        if not args.overwrite:
            while create_bin not in 'yYnN':
                create_bin = input(f'{bin_path} is not an existing directory.'
                                    ' Create? y/n\n')
            if create_bin in 'nN':
                raise ValueError(f'Cannot link to {bin_path}')

        os.mkdir(bin_path)

        print(f'Created {bin_path}')
        print("""Add this to your path by adding this line to your .bashrc: 
            export PATH=$PATH:~/bin
            """)

    
    binlink(args.source, args.target, overwrite=args.overwrite)