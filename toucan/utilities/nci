#!/usr/bin/env python3


import re
import sys
from datetime import datetime as dt

from toucan.stringops import colors as col
import toucan.remote.raijin as rj

def parse_byte(s):
    units = dict(B=0,
                 kB=3,
                 MB=6,
                 GB=9,
                 TB=12)
    num, size, _ = re.split('([kBMGT]+)', s)
    return float(num)*(10**units[size])


def get_period_dates(line):
    # Usage Report: Project=xxx Compute Period=2018.q3 (01/07/2018-30/09/2018)
    start, end = line.strip()[-22:-1].split('-')
    return parse_date(start), parse_date(end)


def parse_date(date):
    return dt.strptime(date, '%d/%m/%Y')


def get_ksu_field(lines, field):
    for line in lines:
        if field in line:
            value = line.split(':')[1].split('KSU')[0]
            return float(value)


def get_usage():
    # get nci_account output
    nci_out = rj.remote(rj.NCI_ACCOUNT)
    nci_acct = [x.strip() for x in nci_out.stdout.split('\n')]
    nci_acct = [x for x in nci_acct if x]

    # date accounting
    period_line = nci_acct.pop(0)
    start, end = get_period_dates(period_line)
    now = rj.remote(rj.DATE)
    today = parse_date(now.stdout.strip())

    days_elapsed = (today - start).days
    days_to_go = (end - today).days

    # grant
    grant = get_ksu_field(nci_acct, 'Total Grant')
    used = get_ksu_field(nci_acct, 'Total Used')
    available = get_ksu_field(nci_acct, 'Total Avail')

    # short
    rj_short = [x for x in nci_acct if 'short' in x][-1]
    short_grant, short_usage, short_avail = rj_short.split()[2:5]
    short_grant_units = parse_byte(short_grant)
    short_used_percent = 100*(parse_byte(short_usage)) / short_grant_units
    short_avail_percent = 100*(parse_byte(short_avail)) / short_grant_units

    # individual usage
    short = rj.remote(rj.SHORT_REPORT)
    header = short.stdout.split('\n')[1:4]

    relevant = [x for x in short.stdout.split('\n') if rj.PROJECT in x][1:]
    sized = [(parse_byte(x.split()[2]), x) for x in relevant]
    sized.sort(key=lambda x: x[0], reverse=True)
    with_percent = [f'{x} {100*(y/short_grant_units):2.0f}%' for y, x in sized]

    disk = '\n'.join(header+with_percent)

    print(f"""{period_line}
    === GRANT USAGE ===
        Total: {grant:>6.2f} KSU
         Used: {used:>6.2f} KSU ({used/days_elapsed:>4.2f} KSU/day)
    Available: {available:>6.2f} KSU ({available/days_to_go:>4.2f} KSU/day)

    === SHORT USAGE ===
        Total: {short_grant}
         Used: {short_usage} ({short_used_percent:>2.0f}%)
    Available: {short_avail} ({short_avail_percent:>2.0f}%)

    === FILES ===\n{disk}
    """)


if __name__ == '__main__':
    print('Getting usage... ')
    get_usage()
